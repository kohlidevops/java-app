		@Library('my-shared-lib') _
		pipeline{
        	agent any
        		parameters{
                		choice(name: 'action', choices: 'create\ndelete', description: 'Choose create/Destroy')
        			}
			environment{
        			ACCESS_KEY = credentials('AWS_ACCESS_KEY_ID')
        			SECRET_KEY = credentials('AWS_SECRET_KEY_ID')
    				}
        	stages{
                	stage('Git Checkout'){
                                       when { expression {  params.action == 'create' } }
                        steps{
                        	gitCheckout(
                                	branch: "main",
                            		url: "https://github.com/kohlidevops/java-app.git"
                                        )
                        	}
                	}
                stage('Unit Test with Maven'){
                                     when { expression {  params.action == 'create' } }
                                steps{
                                        script{
                                        	mvnTest()
                                        }
                                }
                        }
                stage('Integration Test with Maven'){
                                        when { expression {  params.action == 'create' } }
                                steps{
                                        script{
                                                mvnIntegrationTest()
                                        }
                                }
                        }
                stage('Static Code Analysis with SonarQube'){
                                        when { expression {  params.action == 'create' } }
                                steps{
                                        script{
                                                statiCodeAnalysis()
                                        }
                                }
                        }
                stage('Code Quality Status Check with SonarQube'){
                                        when { expression {  params.action == 'create' } }
                                steps{
                                        script{
                                        	QualityGateStatus()
                                        }
                                }
                        }
                stage('Maven Build Stage'){
                                        when { expression {  params.action == 'create' } }
                                steps{
                                        script{
                                        	mvnBuild()
                                        }
                                }
                        }
                stage('Amazon ECR Image Build'){
         				when { expression {  params.action == 'create' } }
            			steps{
               				script{
                   				dockerBuildECR()
               					}
            				}
        			}
        	stage('Amazon ECR Image Scanning'){
         				when { expression {  params.action == 'create' } }
            			steps{
               				script{
                				dockerImageScanECR()
               					}
            				}
        			}
        	stage('Amazon ECR Image Push'){
         				when { expression {  params.action == 'create' } }
            			steps{
               				script{
                   				dockerImagePushECR()
               					}
            				}
        			}
		stage('Create EKS Cluster : Terraform'){
            				when { expression {  params.action == 'create' } }
            			steps{
                			script{
                    				dir('eks_module') {
                      					sh """
                          				terraform init
                          				terraform plan -var 'access_key=$ACCESS_KEY' -var 'secret_key=$SECRET_KEY' -var 'region=ap-south-1' --var-file=./config/terraform.tfvars
                          				terraform apply -var 'access_key=$ACCESS_KEY' -var 'secret_key=$SECRET_KEY' -var 'region=ap-south-1' --var-file=./config/terraform.tfvars --auto-approve
                      					"""
                  						}
                				}
            				}
        			}
		stage('Connect to EKS '){
            				when { expression {  params.action == 'create' } }
        			steps{

            				script{

                				sh """
                				aws configure set aws_access_key_id "$ACCESS_KEY"
                				aws configure set aws_secret_access_key "$SECRET_KEY"
                				aws configure set region "ap-south-1"
                				aws eks --region ap-south-1 update-kubeconfig --name demo-cluster1
                				"""
            					}
        				}
        			}
		    	}
        	}
